/* Main Idea of JavaScript */
1. Save the data
2. Generate the HTML
3. Make it interactive

alert('hello universe!');

'hello' + 5 => hello5

// template string
`Items (${1 + 1}): $${(2095 + 799) / 100}`  // Interpolation {}
=> 'Items (2): $28.94'

/*
    DOM (document object model)
    DOM combines js & html together
    It gives js full control of the webpage

*/

document.body.innerHTML = 'hello';  // changing current web page, always string

// Void HTML
document.querySelector('any-element').value;  // string

5 == '5.00'  // true
5 === '5.00'  // false

Falsy Values: false 0 '' NaN undefined null

Ternary operator: ?:
Guard operator: &&  // short-circuits (false)
Default operator: ||  // short-circuits (true)

function fn(param1, param2) {}

const obj = {
    prop1: val,
    prop2: val
};

obj.prop3 = val;  // new property
delete obj.prop3;

const obj = {
    obj1: {
        p1: v1;
        p2: v2;
    },
    f: function fn() {
        //
    }
};  // object, function all are values in JS

/*
    JSON:
    JSON is Universal.
    With less feature.
    Doesn't support function.
    Always double quote.
    Built-in object in JS.
*/

JSON.stringify(obj);  // string

JSON to JS obj: JSON.parse(JSON.stringify(obj));

/*
    localStorage:
    Variables are volatile (page refresh all gone).
    So, we can store stuffs in localStorage.
    Only supports string store.
    Built-in object in JS.
*/

localStorage.setItem('message', 'some_string');
localStorage.getItem('message');

// js object in localStorage
localStorage.setItem('score', JSON.stringify(score));

obj = JSON.parse(localStorage.getItem('score'));

localStorage.removeItem('score');

// Auto Boxing
'hello'.length  // string, but works like obj (auto)

const obj = {
    message: val;
    price: p;
};
const { message, price } = obj;  // destructuring (shortcut)

same = 'text';
const obj = {
    // same: same
    same,

    // method: function function() {
        //
    // }

    method() {
        //
    }
};
console.log(obj);  // { same: 'text'}
obj.method();

clicks, keydowns => event
onclick, onkeydown => event listeners

// Type Coercion
String(25)
console.log('25' - 5); // 20

DOCUMENT: webpage
WINDOW (obj): browser  // window.document === document

/* Array */
const myArr = [1, 2, 3, 'hello', true, { name: 'name'}, [1, 2]];

myArr.push(100);

myArr.splice(idx, tot);  // delete total 'tot' elements starting at 'idx'

const arr2 = arr1.slice();  // making a copy instead of referencing

const [firstVal, secondVal] = [1, 2, 3];  // element from array

const function1 = function() {
    console.log('hello');
};

console.log(function1());  // function is value

function run(param) {
    param();
}
run(function() { // callback function: function as argument
    //
});

/*
    Asynchronous code: won't wait for a line to finish before going to the next line
    
    Synchronous code: line by line
*/
let id = setTimeout(function(){
    //
}, 3000);  // 3s
console.log('next line');  // it come's first

clearTimeOut(id);

setInterval(function(){
    //
}, 3000);  // keep running a function in the future: in every 3s

[
    'a',
    'b',
    'c'
].forEach(function(value){
    console.log(value);  // a b c
});

[
    'a',
    'b',
    'c'
].forEach(function(value, index){
    if (value === 'b') {
        return;  // same as continue
    }
    console.log(value);  // a c
});

const = arrowFunction = () => {
    //
};
arrowFunction();

const oneParam = param => {
    //
};

const oneLine = () => 2 + 3;  // returns 5

/*
    Event listeners
    Same as onclick
    Can run multiple events on same element
    Has delete option
*/

const eventListener = () => {
    console.log('click');
};

buttonElement.addEventListener('click', eventListener);
buttonElement.addEventListener('click', () => {
    console.log('click2');
});

buttonElement.removeEventListener('click', eventListener);

[1, -3, 5].filter((value, index) => {
    return value >= 0;
});  // [1, 5]

[1, 1, 3].map((value, index) => {
    return value*2;
});  // [2, 2, 6]

[1, 1, 3].map(value => value*2);  // oneParam, oneLine

/* Data Attribute */
- is just another HTML Attribute
- allows us to attach any info to an element
- starts with 'data' (in html class)

closure = if a function has access to a value/variable, it will always have access to that value/variable

Modules = better way to organize codes
/*
    works with live server
    helps us avoid naming conflict
    don't have to worry about order of files
*/

/* ESM Version: EcmaScript */

export default some_stuff;  // default export/import, at a time one thing from one file

/* MVC (design patter), many JS frameworks are based on MVC */

update the data + regenerate all the HTML = MVC

Split our code into 3 parts:
    1. Model: saves and manages the data
    2. View: takes the data and displays it on the page
    3. controller: runs some code when we interact with the page (update)

MVC = makes sure the page always matches the data

/* TESTING */
    1. Manual Testing = Open the website and try out the code
    2. Automated Testing = using code to test code
    
    3. Group of related tests = test suite

    4. Flaky Test = test that sometimes passes and sometimes fails
    5. Mocks = let us replace a method with a fake version
    6. A mock only lats for one item
    
    7. Unit Tests = testing 1 piece of the code (maybe a function at a time)
    8. Integration Tests = tests many units/pieces of code working together

    9. Hooks = lets us run some code for each test
    10. Hooks in Jasmine: beforeEach(), beforeAll(), afterEach(), afterAll()

localStorage.clear();  // in browser (if any issue)

/* OOP */
1. another way of programming, another way to write code
2. organizing our code into objects
3. tries to represent the real world
4. easy to create multiple objects